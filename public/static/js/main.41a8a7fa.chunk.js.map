{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","Chart.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","today","total","onClick","selected","color","console","log","Card","className","CardContent","numeral","format","typeData","cases","hex","rgb","rgba","opacity","multiplier","recovered","deaths","Map","center","zoom","type","selectedCountry","countries","useState","isPopup","setIsPopup","countryInfo","flag","country","setCountry","useEffect","find","e","iso2","minZoom","maxZoom","TileLayer","url","attribution","map","index","Circle","data-key","key","lat","long","fillOpacity","fillColor","radius","Math","sqrt","onclick","Popup","position","onClose","src","alt","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","Chart","worldwideData","setWorldwideData","countriesData","setCountriesData","selectedData","setSelectedData","buildDataFromTimeline","json","first_case_key","Object","keys","length","previous_case","x","y","fetch","then","response","country_data","timeline","datasets","backgroundColor","borderColor","App","countryCode","setCountryCode","setType","countryData","setCountryData","todayCases","todayDeaths","todayRecovered","setCenter","setZoom","FormControl","variant","Select","onChange","target","MenuItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41a8a7fa.chunk.js","sourcesContent":["import React from 'react'\nimport {\n    Card,\n    Typography,\n    CardContent\n} from '@material-ui/core'\nimport './InfoBox.css'\nimport numeral from 'numeral'\n\nfunction InfoBox({ title, today, total, onClick = () => { }, selected = true, color = \"red\" }) {\n    console.log(color)\n\n    return (\n        <Card className={\"infoBox \" + ((selected) ? \"selected \" : \"\") + color} onClick={onClick}>\n            <CardContent>\n                <h1 className=\"infoBox__title\" color=\"textSecondary\"> {title}</h1>\n                <h2 className={\"infoBox__today \"+color}>+{numeral(today).format(\"0.0a\")} Today</h2>\n                <h2 className=\"infoBox__total\" color=\"textSecondary\"> {numeral(total).format(\"0.0a\")} Total</h2>\n            </CardContent>\n        </Card>\n    )\n\n}\n\nexport default InfoBox","\nconst typeData = {\n    cases: {\n        hex: \"#CC1034\",\n        rgb: \"rgb(204, 16, 52)\",\n        rgba: (opacity) => \"rgb(204,16,52,\" + opacity + \")\",\n        multiplier: 800\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        rgb: \"rgb(125,215,29)\",\n        rgba: (opacity) => \"rgb(125,215,29,\" + opacity + \")\",\n        multiplier: 1200\n    },\n    deaths: {\n        hex: \"#000000\",\n        rgba: (opacity) => \"rgb(0,0,0,\" + opacity + \")\",\n        multiplier: 2000\n    }\n}\n\nexport {\n    typeData\n}","\nimport React, { useEffect, useState } from 'react'\nimport {\n\n} from '@material-ui/core'\nimport \"./Map.css\"\nimport numeral from 'numeral'\nimport { Map as LeafletMap, Marker, Circle, Popup, TileLayer } from 'react-leaflet'\nimport { typeData } from './util.js'\nimport \"leaflet/dist/leaflet.css\"\n\n\nfunction Map({ center = [39.557191, -7.8536599], zoom = 5, type = 'cases', selectedCountry = \"worldwide\", countries = [], className = \"\" }) {\n    const [isPopup, setIsPopup] = useState(false)\n    const [country, setCountry] = useState({ countryInfo: { flag: \"\" }, cases: 0, recovered: 0, deaths: 0 })\n\n    const onChangeSelectedCountry = () => {\n        if (selectedCountry === 'worldwide') {\n            setIsPopup(false)\n            return\n        }\n        var country = countries.find((e) => e.countryInfo.iso2 === selectedCountry)\n        setCountry(country)\n        setIsPopup(true)\n    }\n    useEffect(onChangeSelectedCountry,\n        [selectedCountry])\n\n    return (\n        <div className={\"map \" + className}>\n            <LeafletMap center={center} minZoom={2} maxZoom={7} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                />\n                {countries.map((country, index) => {\n                    return (\n                        <Circle\n                            data-key={country.countryInfo.iso2}\n                            key={index}\n                            center={[country.countryInfo.lat, country.countryInfo.long]}\n                            fillOpacity={0.5}\n                            color={typeData[type].hex}\n                            fillColor={typeData[type].hex}\n                            radius={Math.sqrt(country[type]) * typeData[type].multiplier}\n                            onclick={(e) => { setCountry(country); setIsPopup(true) }}\n                        />\n\n                    )\n                })}\n                {isPopup && <Popup position={[country.countryInfo.lat, country.countryInfo.long]} onClose={() => { setIsPopup(false) }} className=\"map__popup\" >\n                    <img src={country.countryInfo.flag} alt=\"Flag\"></img>\n                    <p className=\"country\">{country.country}</p>\n                    <p className=\"data\">{numeral(country[type]).format(\"0,0\") + \" \" + type} </p>\n                </Popup>}\n            </LeafletMap>\n        </div >\n    )\n}\n\nexport default Map","\nimport React from 'react'\nimport {\n\n} from '@material-ui/core'\nimport './Table.css'\nimport numeral from 'numeral'\n\nfunction Table({ countries =[]}) {\n\n    return (\n        <div className=\"table\">\n            <table>\n                <tbody>\n                    {countries.map((country) =>\n                        <tr key={country.country}>\n                            <td>\n                                <img src={country.countryInfo.flag} alt=\"Flag\"></img>\n                            </td>\n                            <td>{country.country}</td>\n                            <td className=\"right-td\">\n                                <p>Cases:<strong>{numeral(country.cases).format(\"0.0a\")}</strong></p>\n                                <p>Recovered:<strong>{numeral(country.recovered).format(\"0.0a\")}</strong></p>\n                                <p>Deaths:<strong>{numeral(country.deaths).format(\"0.0a\")}</strong></p>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport {\n\n} from '@material-ui/core'\nimport numeral from \"numeral\"\nimport \"./Chart.css\"\nimport { typeData } from './util'\n\nconst options = {\n    legend: {\n        display: false\n    },\n    elements: {\n        point: {\n            radius: 0\n        }\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: (tooltipItem, data) => {\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            }\n        }\n    },\n    scales: {\n        xAxes: [{\n            type: \"time\",\n            time: {\n                format: \"MM/DD/YY\",\n                tooltipFormat: \"ll\"\n            }\n        }\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n\n                },\n                ticks: {\n                    callback: (value, index, values) => {\n                        return numeral(value).format(\"0a\")\n                    }\n                }\n            }\n        ]\n    }\n}\n\n\nfunction Chart({ country = \"worldwide\", type = \"cases\" }) {\n    const [worldwideData, setWorldwideData] = useState(null)\n    const [countriesData, setCountriesData] = useState([])\n    const [selectedData, setSelectedData] = useState([])\n\n    function buildDataFromTimeline(json) {\n        var first_case_key = (Object.keys(json).length > 0) ? Object.keys(json)[0] : 0\n        var previous_case = json[first_case_key]\n        delete json[first_case_key]\n\n        const data = Object.keys(json).map((e, index) => {\n            var data = json[e] - previous_case\n            if (data < 0) data = 0\n            previous_case = json[e]\n            return { x: e, y: data }\n        })\n        return data\n    }\n\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then(response => response.json())\n            .then(json => {\n                setWorldwideData(json)\n                var data = buildDataFromTimeline(json[type])\n                setSelectedData(data)\n\n            })\n        fetch(\"https://disease.sh/v3/covid-19/historical?lastdays=120\")\n            .then(response => response.json())\n            .then(json => {\n                setCountriesData(json)\n            })\n    }, [])\n\n    useEffect(() => {\n        if (country === \"worldwide\") {\n            if (worldwideData == null) {\n                setSelectedData([])\n                return\n            }\n            console.log(worldwideData[type])\n            var data = buildDataFromTimeline(worldwideData[type])\n            setSelectedData(data)\n        } else {\n            let country_data = countriesData.find((e) => e.country === country)\n            if (country_data && 'timeline' in country_data) {\n                var data = buildDataFromTimeline(country_data.timeline[type])\n                setSelectedData(data)\n            } else {\n                setSelectedData()\n            }\n        }\n    }, [country, type])\n\n    return (\n        <div className=\"chart\">\n            <Line options={options} data={{ datasets: [{ backgroundColor: typeData[type].rgba(0.5), borderColor: typeData[type].hex, data: selectedData }] }}></Line>\n        </div>\n    )\n}\n\nexport default Chart","import React, { useState, useEffect } from 'react';\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport Chart from './Chart'\nimport './App.css';\n\nfunction App() {\n  const [countryCode, setCountryCode] = useState(\"worldwide\")\n  const [type, setType] = useState(\"cases\")\n  const [worldwideData, setWorldwideData] = useState(null)\n  const [countryData, setCountryData] = useState([])\n  const [selectedData, setSelectedData] = useState({ cases: 0, todayCases: 0, deaths: 0, todayDeaths: 0, recovered: 0, todayRecovered: 0 })\n  const [center, setCenter] = useState([0, 0])\n  const [zoom, setZoom] = useState(2)\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(data => data.json())\n      .then((json) => {\n        setSelectedData(json)\n        setWorldwideData(json)\n      })\n    fetch('https://disease.sh/v3/covid-19/countries')\n      .then(data => data.json())\n      .then((json) => {\n        setCountryData(json)\n        console.log(json)\n      })\n  }, [])\n\n  const onCountryChange = (e) => {\n    const countryCode = e.target.value\n    setCountryCode(countryCode)\n    if (countryCode === 'worldwide' && worldwideData != null) {\n      setSelectedData(worldwideData)\n      setZoom(2)\n      setCenter(0, 0)\n    }\n    else {\n      let countryInfo = countryData.find((e) => e.countryInfo.iso2 === countryCode)\n      setZoom(5)\n\n      setCenter([countryInfo.countryInfo.lat, countryInfo.countryInfo.long])\n      setSelectedData(countryInfo)\n    }\n  }\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <div className=\"app__selector\">\n            <img src={(countryCode === \"worldwide\") ? \"https://upload.wikimedia.org/wikipedia/commons/2/2f/Flag_of_the_United_Nations.svg\" : countryData.find((e) => e.countryInfo.iso2 === countryCode).countryInfo.flag} alt=\"Flag\"></img>\n            <FormControl variant=\"outlined\">\n              <Select value={countryCode} onChange={onCountryChange}>\n                <MenuItem key={0} value=\"worldwide\">Worldwide</MenuItem>\n                {countryData.map((country, index) => <MenuItem key={index + 1} value={country.countryInfo.iso2}>{country.country}</MenuItem>)}\n              </Select>\n            </FormControl>\n          </div>\n        </div>\n        <div className=\"app__infoboxes\">\n          <InfoBox title=\"Cases\" today={selectedData.todayCases} total={selectedData.cases} selected={type === 'cases'} color=\"red\" onClick={(data) => { setType(\"cases\") }}></InfoBox>\n          <InfoBox title=\"Recoveries\" today={selectedData.todayRecovered} total={selectedData.recovered} selected={type === 'recovered'} color=\"green\" onClick={(data) => { setType(\"recovered\") }}></InfoBox>\n          <InfoBox title=\"Deaths\" today={selectedData.todayDeaths} total={selectedData.deaths} selected={type === 'deaths'} color=\"black\" onClick={(data) => { setType(\"deaths\") }}></InfoBox>\n        </div>\n\n        <Map className=\"app__map\" type={type} selectedCountry={countryCode} countries={countryData} zoom={zoom} center={center}></Map>\n      </div>\n      <div className=\"app__right\">\n        <Card className=\"app__right__card\">\n          <CardContent className=\"app__right__card\">\n            <div className=\"app__information\">\n              <h3>Data By Country</h3>\n              <Table countries={countryData} />\n              <h3>{(countryCode === \"worldwide\") ? \"Worldwide\" : countryData.find((e) => e.countryInfo.iso2 === countryCode).country} new {type}</h3 >\n              <Chart type={type} country={(countryCode === \"worldwide\") ? \"worldwide\" : countryData.find((e) => e.countryInfo.iso2 === countryCode).country}></Chart>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}